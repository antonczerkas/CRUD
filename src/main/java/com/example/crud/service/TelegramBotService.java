package com.example.crud.service;

import com.example.crud.client.RuvdsApiClient;
import com.example.crud.dto.RuvdsDTO;
import com.example.crud.model.TelegramUser;
import com.example.crud.repository.TelegramUserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;

@Service
@RequiredArgsConstructor
public class TelegramBotService extends TelegramLongPollingBot {
    private final TelegramUserRepository telegramUserRepository;
    private final RuvdsApiClient ruvdsApiClient;

    @Value("${telegram.bot.username}")
    private String botUsername;

    @Value("${telegram.bot.token}")
    private String botToken;

    private final Map<Long, String> awaitingInputMap = new ConcurrentHashMap<>();

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Long chatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText();
            try {
                if (awaitingInputMap.containsKey(chatId)) {
                    handleUserInput(chatId, messageText);
                    return;
                }
                handleCommand(chatId, messageText);
            } catch (Exception e) {
                sendNotification(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞: " + e.getMessage() + "\n/help");
            }
        }
    }

    private void handleCommand(Long chatId, String command) {
        switch (command) {
            case "/start":
                sendWelcomeMessage(chatId);
                break;
            case "/help":
                sendHelpMessage(chatId);
                break;
            case "/status":
                sendStatus(chatId);
                break;
            case "/enable":
                enableNotifications(chatId, true);
                break;
            case "/disable":
                enableNotifications(chatId, false);
                break;
            case "/settoken":
                prepareForTokenInput(chatId);
                break;
            case "/setthreshold":
                prepareForThresholdInput(chatId);
                break;
            case "/servers":
                sendServersList(chatId);
                break;
            default:
                sendNotification(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. /help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥");
        }
    }

    private void sendServersList(Long chatId) {
        TelegramUser user = telegramUserRepository.findById(chatId).orElse(null);
        if (user == null || user.getRuvdsApiToken() == null) {
            sendNotification(chatId, "‚ùå API —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settoken");
            return;
        }
        try {
            RuvdsDTO.ServersListResponse response = ruvdsApiClient.getServers("Bearer " + user.getRuvdsApiToken());
            if (response == null || response.getServers() == null || response.getServers().isEmpty()) {
                sendNotification(chatId, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ RuVDS");
                return;
            }
            StringBuilder message = new StringBuilder("üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n");
            for (RuvdsDTO.ServerResponse server : response.getServers()) {
                String ip = (server.getNetworkV4() != null && !server.getNetworkV4().isEmpty())
                        ? server.getNetworkV4().get(0).getIpAddress()
                        : "–Ω–µ—Ç IP";
                String paidTill = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞";
                if (server.getPaidTill() != null) {
                    paidTill = ZonedDateTime.parse(server.getPaidTill(), DateTimeFormatter.ISO_DATE_TIME)
                            .withZoneSameInstant(ZoneId.systemDefault())
                            .format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));
                }
                String comment = server.getUserComment() != null ? " (" + server.getUserComment() + ")" : "";
                message.append(String.format(
                        "–°–µ—Ä–≤–µ—Ä #%d%s\nIP: %s\n–û–ø–ª–∞—Ç–∞ –¥–æ: %s\n\n",
                        server.getServerId(),
                        comment,
                        ip,
                        paidTill
                ));
            }
            sendNotification(chatId, message.toString().trim());
        } catch (Exception e) {
            sendNotification(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void prepareForTokenInput(Long chatId) {
        awaitingInputMap.put(chatId, "token");
        sendNotification(chatId, "üîë –í–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω RuVDS:\n" +
                "[https://ruvds.com/ru-rub/my/settings/api]");
    }

    private void prepareForThresholdInput(Long chatId) {
        awaitingInputMap.put(chatId, "threshold");
        sendNotification(chatId, "üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (–≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö):");
    }

    private void handleUserInput(Long chatId, String input) {
        String expectedInput = awaitingInputMap.get(chatId);
        awaitingInputMap.remove(chatId);

        if (input.startsWith("/")) {
            handleCommand(chatId, input);
            return;
        }

        switch (expectedInput) {
            case "token":
                saveToken(chatId, input);
                break;
            case "threshold":
                saveThreshold(chatId, input);
                break;
        }
    }

    private void saveToken(Long chatId, String token) {
        if (token.trim().isEmpty()) {
            sendNotification(chatId, "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" + "\n/help");
            return;
        }

        TelegramUser user = telegramUserRepository.findById(chatId)
                .orElseGet(() -> TelegramUser.builder()
                        .telegramChatId(chatId)
                        .notificationEnabled(true)
                        .minBalanceThreshold(0.0)
                        .build());

        user.setRuvdsApiToken(token);
        telegramUserRepository.save(user);
        sendNotification(chatId, "‚úÖ API —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n" +
                "/setthreshold —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å");
    }

    private void saveThreshold(Long chatId, String thresholdInput) {
        try {
            double threshold = Double.parseDouble(thresholdInput);

            TelegramUser user = telegramUserRepository.findById(chatId)
                    .orElseGet(() -> TelegramUser.builder()
                            .telegramChatId(chatId)
                            .notificationEnabled(true)
                            .build());

            user.setMinBalanceThreshold(threshold);
            telegramUserRepository.save(user);
            sendNotification(chatId, String.format("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %.2f —Ä—É–±." + "\n/help", threshold));
        } catch (NumberFormatException e) {
            sendNotification(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ 250.50" + "\n/help");
        }
    }

    private void sendWelcomeMessage(Long chatId) {
        String message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º –∏ —Å–æ–æ–±—â–∞–µ—Ç, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ RuVDS\n\n" +
                "–°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –Ω–∞ —á—Ç–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É:\n" +
                "https://ruvds.com/ru-rub/my/settings/api\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settoken –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é\n" +
                "–ª–∏–±–æ /help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n" +
                "‚ùó‚ùó‚ùó–í —Ä–∞–º–∫–∞—Ö —Ç–µ—Å—Ç–∞ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç api –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n" +
                "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ GitHub:\n" +
                "https://github.com/antonczerkas/CRUD";
        sendNotification(chatId, message);
    }

    private void sendHelpMessage(Long chatId) {
        String message = "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n" +
                "/settoken - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API —Ç–æ–∫–µ–Ω RuVDS\n" +
                "/setthreshold - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å\n" +
                "/status - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n" +
                "/servers - —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤\n" +
                "/enable - –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" +
                "/disable - –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" +
                "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥";
        sendNotification(chatId, message);
    }

    private void sendStatus(Long chatId) {
        Optional<TelegramUser> userOpt = telegramUserRepository.findById(chatId);

        if (userOpt.isPresent()) {
            TelegramUser user = userOpt.get();
            String message = String.format(
                    "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n" +
                            "API —Ç–æ–∫–µ–Ω: %s\n" +
                            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: %.2f —Ä—É–±.\n" +
                            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s" + "\n/help",
                    user.getRuvdsApiToken() != null ? "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    user.getMinBalanceThreshold(),
                    user.getNotificationEnabled() ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            );
            sendNotification(chatId, message);
        } else {
            sendNotification(chatId, "‚ÑπÔ∏è –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settoken –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã." + "\n/help");
        }
    }

    private void enableNotifications(Long chatId, boolean enable) {
        TelegramUser user = telegramUserRepository.findById(chatId)
                .orElseGet(() -> TelegramUser.builder()
                        .telegramChatId(chatId)
                        .notificationEnabled(enable)
                        .minBalanceThreshold(0.0)
                        .build());

        user.setNotificationEnabled(enable);
        telegramUserRepository.save(user);

        String status = enable ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–≤—ã–∫–ª—é—á–µ–Ω—ã";
        sendNotification(chatId, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è " + status + "\n/help");
    }

    public void sendNotification(Long chatId, String message) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId.toString());
        sendMessage.setText(message);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}