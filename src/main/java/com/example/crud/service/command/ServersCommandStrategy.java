package com.example.crud.service.command;

import com.example.crud.dto.RuvdsDTO;
import com.example.crud.model.TelegramUser;
import com.example.crud.service.TelegramBotService;
import org.springframework.stereotype.Component;

import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Optional;

@Component
public class ServersCommandStrategy implements CommandStrategy {
    @Override
    public String getCommand() {
        return "/servers";
    }

    @Override
    public void execute(Long chatId, TelegramBotService botService) {
        Optional<TelegramUser> userOpt = botService.telegramUserRepository.findById(chatId);
        if (userOpt.isEmpty() || userOpt.get().getRuvdsApiToken() == null) {
            botService.sendNotification(chatId, "‚ùå API —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settoken");
            return;
        }
        try {
            RuvdsDTO.ServersListResponse response = botService.ruvdsApiClient.getServers("Bearer " + userOpt.get().getRuvdsApiToken());
            if (response == null || response.getServers() == null || response.getServers().isEmpty()) {
                botService.sendNotification(chatId, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ RuVDS");
                return;
            }
            StringBuilder message = new StringBuilder("üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n");
            ZonedDateTime now = ZonedDateTime.now();
            for (RuvdsDTO.ServerResponse server : response.getServers()) {
                String ip = (server.getNetworkV4() != null && !server.getNetworkV4().isEmpty())
                        ? server.getNetworkV4().get(0).getIpAddress()
                        : "–Ω–µ—Ç IP";
                String paidTill = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞";
                String paymentEmoji = "";
                if (server.getPaidTill() != null) {
                    ZonedDateTime paidTillDate = ZonedDateTime.parse(server.getPaidTill(), DateTimeFormatter.ISO_DATE_TIME)
                            .withZoneSameInstant(ZoneId.systemDefault());
                    paidTill = paidTillDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));
                    long daysBetween = java.time.temporal.ChronoUnit.DAYS.between(now, paidTillDate);
                    if (daysBetween < 0) {
                        paymentEmoji = "‚è∞ ";
                    } else if (daysBetween < 14) {
                        paymentEmoji = "üî¥ ";
                    } else if (daysBetween < 30) {
                        paymentEmoji = "üü° ";
                    } else {
                        paymentEmoji = "üü¢ ";
                    }
                }
                String comment = server.getUserComment() != null ? " (" + server.getUserComment() + ")" : "";
                message.append(String.format(
                        "–°–µ—Ä–≤–µ—Ä #%d%s\nIP: %s\n%s–û–ø–ª–∞—Ç–∞ –¥–æ: %s\n\n",
                        server.getServerId(),
                        comment,
                        ip,
                        paymentEmoji,
                        paidTill
                ));
            }
            message.append("\nüî¥ - –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 14 –¥–Ω–µ–π\n")
                    .append("üü° - –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 30 –¥–Ω–µ–π\n")
                    .append("üü¢ - –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å 30 –¥–Ω–µ–π –∏ –±–æ–ª–µ–µ\n")
                    .append("‚è∞ - –µ—Å–ª–∏ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –∏—Å—Ç—ë–∫\n/help");

            botService.sendNotification(chatId, message.toString().trim());
        } catch (Exception e) {
            botService.sendNotification(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }
}